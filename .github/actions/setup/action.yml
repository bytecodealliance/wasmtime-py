name: 'Setup wasmtime-py CI'
inputs:
  python-version:
    description: 'Version of Python to configure'
    required: false
    default: '3.x'
runs:
  using: "composite"
  steps:
  # Setup Python and the Python dependencies of this project
  - uses: actions/setup-python@v5
    with:
      python-version: ${{ inputs.python-version }}
  - run: pip install -e ".[testing]"
    shell: bash

  # Download precompiled wasmtime binaries for running the project
  - run: python ci/download-wasmtime.py
    shell: bash

  # https://github.com/actions/cache/blob/main/workarounds.md#improving-cache-restore-performance-on-windows-using-cross-os-caching
  - if: ${{ runner.os == 'Windows' }}
    name: Use GNU tar
    shell: cmd
    run: |
      echo "Adding GNU tar to PATH"
      echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"

  # Ensure the Rust lockfile is up-to-date
  - run: cargo fetch --manifest-path rust/Cargo.toml --locked
    shell: bash

  # Install the `wasm-tools` binary with the `component` subcommand that is all
  # that's needed here.
  - uses: bytecodealliance/actions/wasm-tools/setup@v1
    with:
      version: "1.208.1"

  # Build the bindgen wasm blob with some extra Rust targets.
  - run: |
      rustup target add wasm32-unknown-unknown wasm32-wasip1
      echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV
      echo CARGO_PROFILE_DEV_DEBUG=0 >> $GITHUB_ENV
      echo RUSTC_VERSION=`rustc --version` >> $GITHUB_ENV
    shell: bash
  - uses: actions/cache@v4
    with:
      path: rust/target
      key: rust-target-${{ env.RUSTC_VERSION }}-${{ runner.os }}-${{ hashFiles('rust/Cargo.lock') }}
  - run: python ci/build-rust.py
    shell: bash
